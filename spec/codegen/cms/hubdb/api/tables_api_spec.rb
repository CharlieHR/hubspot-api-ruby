=begin
#HubDB endpoints

#HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Hubspot::Cms::Hubdb::TablesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TablesApi' do
  before do
    # run before each test
    @api_instance = Hubspot::Cms::Hubdb::TablesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TablesApi' do
    it 'should create an instance of TablesApi' do
      expect(@api_instance).to be_instance_of(Hubspot::Cms::Hubdb::TablesApi)
    end
  end

  # unit tests for archive_table
  # Archive a table
  # Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
  # @param table_id_or_name The ID or name of the table to archive.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'archive_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clone_draft_table
  # Clone a table
  # Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
  # @param table_id_or_name The ID or name of the table to clone.
  # @param hub_db_table_clone_request JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.
  # @param [Hash] opts the optional parameters
  # @return [HubDbTableV3]
  describe 'clone_draft_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_table
  # Create a new table
  # Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
  # @param hub_db_table_v3_request The JSON schema for the table being created.
  # @param [Hash] opts the optional parameters
  # @return [HubDbTableV3]
  describe 'create_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_draft_table
  # Export a draft table
  # Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
  # @param table_id_or_name The ID or name of the table to export.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :format The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;.
  # @return [File]
  describe 'export_draft_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_table
  # Export a published version of a table
  # Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
  # @param table_id_or_name The ID or name of the table to export.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :format The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;.
  # @return [File]
  describe 'export_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_draft_tables
  # Return all draft tables
  # Returns the details for each draft table defined in the specified account, including column definitions.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
  # @option opts [String] :after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
  # @option opts [Integer] :limit The maximum number of results to return. Default is 1000.
  # @option opts [DateTime] :created_at Only return tables created at exactly the specified time.
  # @option opts [DateTime] :created_after Only return tables created after the specified time.
  # @option opts [DateTime] :created_before Only return tables created before the specified time.
  # @option opts [DateTime] :updated_at Only return tables last updated at exactly the specified time.
  # @option opts [DateTime] :updated_after Only return tables last updated after the specified time.
  # @option opts [DateTime] :updated_before Only return tables last updated before the specified time.
  # @option opts [Boolean] :archived Specifies whether to return archived tables. Defaults to &#x60;false&#x60;.
  # @return [CollectionResponseWithTotalHubDbTableV3ForwardPaging]
  describe 'get_all_draft_tables test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_tables
  # Get all published tables
  # Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
  # @option opts [String] :after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
  # @option opts [Integer] :limit The maximum number of results to return. Default is 1000.
  # @option opts [DateTime] :created_at Only return tables created at exactly the specified time.
  # @option opts [DateTime] :created_after Only return tables created after the specified time.
  # @option opts [DateTime] :created_before Only return tables created before the specified time.
  # @option opts [DateTime] :updated_at Only return tables last updated at exactly the specified time.
  # @option opts [DateTime] :updated_after Only return tables last updated after the specified time.
  # @option opts [DateTime] :updated_before Only return tables last updated before the specified time.
  # @option opts [Boolean] :archived Specifies whether to return archived tables. Defaults to &#x60;false&#x60;.
  # @return [CollectionResponseWithTotalHubDbTableV3ForwardPaging]
  describe 'get_all_tables test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_draft_table_details_by_id
  # Get details for a draft table
  # Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
  # @param table_id_or_name The ID or name of the table to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :archived Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;.
  # @option opts [Boolean] :include_foreign_ids Set this to &#x60;true&#x60; to populate foreign ID values in the result.
  # @return [HubDbTableV3]
  describe 'get_draft_table_details_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_table_details
  # Get details for a published table
  # Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
  # @param table_id_or_name The ID or name of the table to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :archived Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;.
  # @option opts [Boolean] :include_foreign_ids Set this to &#x60;true&#x60; to populate foreign ID values in the result.
  # @return [HubDbTableV3]
  describe 'get_table_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_draft_table
  # Import data into draft table
  # Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
  # @param table_id_or_name The ID of the destination table where data will be imported.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :config Configuration for the import in JSON format as described above.
  # @option opts [File] :file The source CSV file to be imported.
  # @return [ImportResult]
  describe 'import_draft_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_cms_v3_hubdb_tables_table_id_or_name_draft_publish
  # Publish a table from draft
  # Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
  # @param table_id_or_name The ID or name of the table to publish.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_foreign_ids Set this to &#x60;true&#x60; to populate foreign ID values in the response.
  # @return [HubDbTableV3]
  describe 'post_cms_v3_hubdb_tables_table_id_or_name_draft_publish test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_cms_v3_hubdb_tables_table_id_or_name_unpublish
  # Unpublish a table
  # Unpublishes the table, meaning any website pages using data from the table will not render any data.
  # @param table_id_or_name The ID or name of the table to publish.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_foreign_ids Set this to &#x60;true&#x60; to populate foreign ID values in the response.
  # @return [HubDbTableV3]
  describe 'post_cms_v3_hubdb_tables_table_id_or_name_unpublish test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_draft_table
  # Reset a draft table
  # Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
  # @param table_id_or_name The ID or name of the table to reset.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_foreign_ids Set this to &#x60;true&#x60; to populate foreign ID values in the response.
  # @return [HubDbTableV3]
  describe 'reset_draft_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_draft_table
  # Update an existing table
  # Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
  # @param table_id_or_name The ID or name of the table to update.
  # @param hub_db_table_v3_request The JSON schema for the table being updated.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :archived Specifies whether to return archived tables. Defaults to &#x60;false&#x60;.
  # @option opts [Boolean] :include_foreign_ids Set this to &#x60;true&#x60; to populate foreign ID values in the result.
  # @return [HubDbTableV3]
  describe 'update_draft_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
