=begin
#Files

#Upload and manage files.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Hubspot::Files::Files::FilesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FilesApi' do
  before do
    # run before each test
    @api_instance = Hubspot::Files::Files::FilesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FilesApi' do
    it 'should create an instance of FilesApi' do
      expect(@api_instance).to be_instance_of(Hubspot::Files::Files::FilesApi)
    end
  end

  # unit tests for archive
  # Delete file
  # Delete file by ID
  # @param file_id File ID to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'archive test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for archive_gdpr
  # GDPR delete
  # GDRP delete file
  # @param file_id ID of file to GDPR delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'archive_gdpr test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_import
  # Check import status.
  # Check the status of requested import.
  # @param task_id Import by URL task ID
  # @param [Hash] opts the optional parameters
  # @return [FileActionResponse]
  describe 'check_import test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_search
  # Search files
  # Search through files in the file manager. Does not display hidden or archived files.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :properties Desired file properties in the return object.
  # @option opts [String] :after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.
  # @option opts [String] :before 
  # @option opts [Integer] :limit Number of items to return. Maximum limit is 100.
  # @option opts [Array<String>] :sort Sort files by a given field.
  # @option opts [String] :id Search files by given ID.
  # @option opts [DateTime] :created_at Search files by time of creation.
  # @option opts [DateTime] :updated_at Search files by time of latest updated.
  # @option opts [String] :name Search for files containing the given name.
  # @option opts [String] :path Search files by path.
  # @option opts [Integer] :parent_folder_id Search files within given folder ID.
  # @option opts [Integer] :size Query by file size.
  # @option opts [Integer] :height Search files by height of image or video.
  # @option opts [Integer] :width Search files by width of image or video.
  # @option opts [String] :encoding Search files with specified encoding.
  # @option opts [String] :type Filter by provided file type.
  # @option opts [String] :extension Search files by given extension.
  # @option opts [String] :url Search for given URL
  # @option opts [Boolean] :is_usable_in_content If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content.
  # @option opts [Boolean] :allows_anonymous_access If &#39;true&#39; will show private files; if &#39;false&#39; will show public files
  # @return [CollectionResponseFile]
  describe 'do_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_by_id
  # Get file.
  # Get file by ID.
  # @param file_id Id of the desired file.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :properties 
  # @return [File]
  describe 'get_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_signed_url
  # Get signed URL to access private file.
  # Generates signed URL that allows temporary access to a private file.
  # @param file_id ID of file.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :size For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL.
  # @option opts [Integer] :expiration_seconds How long in seconds the link will provide access to the file.
  # @option opts [Boolean] :upscale If size is provided, this will upscale the image to fit the size dimensions.
  # @return [SignedUrl]
  describe 'get_signed_url test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_from_url
  # Import a file from a URL into the file manager.
  # Asynchronously imports the file at the given URL into the file manager.
  # @param import_from_url_input 
  # @param [Hash] opts the optional parameters
  # @return [ImportFromUrlTaskLocator]
  describe 'import_from_url test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace
  # Replace file.
  # Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.
  # @param file_id Id of the desired file.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent 
  # @option opts [File] :file File data that will replace existing file in the file manager.
  # @option opts [String] :charset_hunch Character set of given file data.
  # @option opts [String] :options JSON String representing FileReplaceOptions
  # @return [File]
  describe 'replace test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_properties
  # update file properties
  # Update properties of file by ID.
  # @param file_id ID of file to update
  # @param file_update_input Options to update.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'update_properties test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload
  # Upload file
  # Upload a single file with content specified in request body.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent 
  # @option opts [File] :file File to be uploaded.
  # @option opts [String] :folder_id Either &#39;folderId&#39; or &#39;folderPath&#39; is required. folderId is the ID of the folder the file will be uploaded to.
  # @option opts [String] :folder_path Either &#39;folderPath&#39; or &#39;folderId&#39; is required. This field represents the destination folder path for the uploaded file. If a path doesn&#39;t exist, the system will try to create one.
  # @option opts [String] :file_name Desired name for the uploaded file.
  # @option opts [String] :charset_hunch Character set of the uploaded file.
  # @option opts [String] :options JSON string representing FileUploadOptions.
  # @return [File]
  describe 'upload test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
