=begin
#Files

#Upload and manage files.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Hubspot::Files::Files::FoldersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FoldersApi' do
  before do
    # run before each test
    @api_instance = Hubspot::Files::Files::FoldersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FoldersApi' do
    it 'should create an instance of FoldersApi' do
      expect(@api_instance).to be_instance_of(Hubspot::Files::Files::FoldersApi)
    end
  end

  # unit tests for archive
  # Delete folder.
  # Delete folder by ID.
  # @param folder_id ID of folder to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'archive test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for archive_by_path
  # Delete folder.
  # Delete folder by path.
  # @param folder_path Path of folder to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'archive_by_path test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_update_status
  # Check folder update status.
  # Check status of folder update. Folder updates happen asynchronously.
  # @param task_id Task ID of folder update
  # @param [Hash] opts the optional parameters
  # @return [FolderActionResponse]
  describe 'check_update_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create
  # Create folder.
  # Creates a folder.
  # @param folder_input Folder creation options
  # @param [Hash] opts the optional parameters
  # @return [Folder]
  describe 'create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_search
  # Search folders
  # Search for folders. Does not contain hidden or archived folders.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :properties Properties that should be included in the returned folders.
  # @option opts [String] :after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.
  # @option opts [String] :before 
  # @option opts [Integer] :limit Limit of results to return. Max limit is 100.
  # @option opts [Array<String>] :sort Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending.
  # @option opts [String] :id Search folder by given ID.
  # @option opts [DateTime] :created_at Search for folders with the given creation timestamp.
  # @option opts [DateTime] :created_at_lte 
  # @option opts [DateTime] :created_at_gte 
  # @option opts [DateTime] :updated_at Search for folder at given update timestamp.
  # @option opts [DateTime] :updated_at_lte 
  # @option opts [DateTime] :updated_at_gte 
  # @option opts [String] :name Search for folders containing the specified name.
  # @option opts [String] :path Search for folders by path.
  # @option opts [Integer] :parent_folder_id Search for folders with the given parent folder ID.
  # @return [CollectionResponseFolder]
  describe 'do_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_by_id
  # Get folder
  # Get folder by ID
  # @param folder_id ID of desired folder
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :properties Properties to set on returned folder.
  # @return [Folder]
  describe 'get_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_by_path
  # Get folder.
  # Get folder by path.
  # @param folder_path Path of desired folder.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :properties Properties to set on returned folder.
  # @return [Folder]
  describe 'get_by_path test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_properties
  # Update folder properties
  # Update properties of folder by given ID. This action happens asynchronously and will update all of the folder&#39;s children as well.
  # @param folder_update_input Properties to change in the folder
  # @param [Hash] opts the optional parameters
  # @return [FolderUpdateTaskLocator]
  describe 'update_properties test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
