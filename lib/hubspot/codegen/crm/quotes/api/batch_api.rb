=begin
#Quotes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Hubspot
  module Crm
    module Quotes
      class BatchApi
        attr_accessor :api_client

        def initialize(api_client = ApiClient.default)
          @api_client = api_client
        end
        # Archive a batch of quotes by ID
        # @param batch_input_simple_public_object_id [BatchInputSimplePublicObjectId] 
        # @param [Hash] opts the optional parameters
        # @return [nil]
        def post_crm_v3_objects_quotes_batch_archive(batch_input_simple_public_object_id, opts = {})
          post_crm_v3_objects_quotes_batch_archive_with_http_info(batch_input_simple_public_object_id, opts)
          nil
        end

        # Archive a batch of quotes by ID
        # @param batch_input_simple_public_object_id [BatchInputSimplePublicObjectId] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
        def post_crm_v3_objects_quotes_batch_archive_with_http_info(batch_input_simple_public_object_id, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: BatchApi.post_crm_v3_objects_quotes_batch_archive ...'
          end
          # verify the required parameter 'batch_input_simple_public_object_id' is set
          if @api_client.config.client_side_validation && batch_input_simple_public_object_id.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_simple_public_object_id' when calling BatchApi.post_crm_v3_objects_quotes_batch_archive"
          end
          # resource path
          local_var_path = '/crm/v3/objects/quotes/batch/archive'

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_simple_public_object_id)

          # return_type
          return_type = opts[:debug_return_type]

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"BatchApi.post_crm_v3_objects_quotes_batch_archive",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: BatchApi#post_crm_v3_objects_quotes_batch_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Create a batch of quotes
        # @param batch_input_simple_public_object_input_for_create [BatchInputSimplePublicObjectInputForCreate] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseSimplePublicObject]
        def post_crm_v3_objects_quotes_batch_create(batch_input_simple_public_object_input_for_create, opts = {})
          data, _status_code, _headers = post_crm_v3_objects_quotes_batch_create_with_http_info(batch_input_simple_public_object_input_for_create, opts)
          data
        end

        # Create a batch of quotes
        # @param batch_input_simple_public_object_input_for_create [BatchInputSimplePublicObjectInputForCreate] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseSimplePublicObject, Integer, Hash)>] BatchResponseSimplePublicObject data, response status code and response headers
        def post_crm_v3_objects_quotes_batch_create_with_http_info(batch_input_simple_public_object_input_for_create, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: BatchApi.post_crm_v3_objects_quotes_batch_create ...'
          end
          # verify the required parameter 'batch_input_simple_public_object_input_for_create' is set
          if @api_client.config.client_side_validation && batch_input_simple_public_object_input_for_create.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_simple_public_object_input_for_create' when calling BatchApi.post_crm_v3_objects_quotes_batch_create"
          end
          # resource path
          local_var_path = '/crm/v3/objects/quotes/batch/create'

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_simple_public_object_input_for_create)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseSimplePublicObject'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"BatchApi.post_crm_v3_objects_quotes_batch_create",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: BatchApi#post_crm_v3_objects_quotes_batch_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Read a batch of quotes by internal ID, or unique property values
        # @param batch_read_input_simple_public_object_id [BatchReadInputSimplePublicObjectId] 
        # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
        # @return [BatchResponseSimplePublicObject]
        def post_crm_v3_objects_quotes_batch_read(batch_read_input_simple_public_object_id, opts = {})
          data, _status_code, _headers = post_crm_v3_objects_quotes_batch_read_with_http_info(batch_read_input_simple_public_object_id, opts)
          data
        end

        # Read a batch of quotes by internal ID, or unique property values
        # @param batch_read_input_simple_public_object_id [BatchReadInputSimplePublicObjectId] 
        # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
        # @return [Array<(BatchResponseSimplePublicObject, Integer, Hash)>] BatchResponseSimplePublicObject data, response status code and response headers
        def post_crm_v3_objects_quotes_batch_read_with_http_info(batch_read_input_simple_public_object_id, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: BatchApi.post_crm_v3_objects_quotes_batch_read ...'
          end
          # verify the required parameter 'batch_read_input_simple_public_object_id' is set
          if @api_client.config.client_side_validation && batch_read_input_simple_public_object_id.nil?
            fail ArgumentError, "Missing the required parameter 'batch_read_input_simple_public_object_id' when calling BatchApi.post_crm_v3_objects_quotes_batch_read"
          end
          # resource path
          local_var_path = '/crm/v3/objects/quotes/batch/read'

          # query parameters
          query_params = opts[:query_params] || {}
          query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_read_input_simple_public_object_id)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseSimplePublicObject'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"BatchApi.post_crm_v3_objects_quotes_batch_read",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: BatchApi#post_crm_v3_objects_quotes_batch_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Update a batch of quotes
        # @param batch_input_simple_public_object_batch_input [BatchInputSimplePublicObjectBatchInput] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseSimplePublicObject]
        def post_crm_v3_objects_quotes_batch_update(batch_input_simple_public_object_batch_input, opts = {})
          data, _status_code, _headers = post_crm_v3_objects_quotes_batch_update_with_http_info(batch_input_simple_public_object_batch_input, opts)
          data
        end

        # Update a batch of quotes
        # @param batch_input_simple_public_object_batch_input [BatchInputSimplePublicObjectBatchInput] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseSimplePublicObject, Integer, Hash)>] BatchResponseSimplePublicObject data, response status code and response headers
        def post_crm_v3_objects_quotes_batch_update_with_http_info(batch_input_simple_public_object_batch_input, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: BatchApi.post_crm_v3_objects_quotes_batch_update ...'
          end
          # verify the required parameter 'batch_input_simple_public_object_batch_input' is set
          if @api_client.config.client_side_validation && batch_input_simple_public_object_batch_input.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_simple_public_object_batch_input' when calling BatchApi.post_crm_v3_objects_quotes_batch_update"
          end
          # resource path
          local_var_path = '/crm/v3/objects/quotes/batch/update'

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_simple_public_object_batch_input)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseSimplePublicObject'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"BatchApi.post_crm_v3_objects_quotes_batch_update",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: BatchApi#post_crm_v3_objects_quotes_batch_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end
      end
    end
  end
end
