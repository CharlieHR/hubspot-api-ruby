=begin
#Schemas

#The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module Hubspot
  module Crm
    module Schemas
      class AssociationDefinition
        # ID of the primary object type to link from.
        attr_accessor :from_object_type_id

        # ID of the target object type ID to link to.
        attr_accessor :to_object_type_id

        # A unique name for this association.
        attr_accessor :name

        attr_accessor :cardinality

        attr_accessor :inverse_cardinality

        # A unique ID for this association.
        attr_accessor :id

        # When the association was defined.
        attr_accessor :created_at

        # When the association was last updated.
        attr_accessor :updated_at

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'from_object_type_id' => :'fromObjectTypeId',
            :'to_object_type_id' => :'toObjectTypeId',
            :'name' => :'name',
            :'cardinality' => :'cardinality',
            :'inverse_cardinality' => :'inverseCardinality',
            :'id' => :'id',
            :'created_at' => :'createdAt',
            :'updated_at' => :'updatedAt'
          }
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'from_object_type_id' => :'String',
            :'to_object_type_id' => :'String',
            :'name' => :'String',
            :'cardinality' => :'String',
            :'inverse_cardinality' => :'String',
            :'id' => :'String',
            :'created_at' => :'DateTime',
            :'updated_at' => :'DateTime'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Crm::Schemas::AssociationDefinition` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Crm::Schemas::AssociationDefinition`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'from_object_type_id')
            self.from_object_type_id = attributes[:'from_object_type_id']
          end

          if attributes.key?(:'to_object_type_id')
            self.to_object_type_id = attributes[:'to_object_type_id']
          end

          if attributes.key?(:'name')
            self.name = attributes[:'name']
          end

          if attributes.key?(:'cardinality')
            self.cardinality = attributes[:'cardinality']
          end

          if attributes.key?(:'inverse_cardinality')
            self.inverse_cardinality = attributes[:'inverse_cardinality']
          end

          if attributes.key?(:'id')
            self.id = attributes[:'id']
          end

          if attributes.key?(:'created_at')
            self.created_at = attributes[:'created_at']
          end

          if attributes.key?(:'updated_at')
            self.updated_at = attributes[:'updated_at']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @from_object_type_id.nil?
            invalid_properties.push('invalid value for "from_object_type_id", from_object_type_id cannot be nil.')
          end

          if @to_object_type_id.nil?
            invalid_properties.push('invalid value for "to_object_type_id", to_object_type_id cannot be nil.')
          end

          if @cardinality.nil?
            invalid_properties.push('invalid value for "cardinality", cardinality cannot be nil.')
          end

          if @inverse_cardinality.nil?
            invalid_properties.push('invalid value for "inverse_cardinality", inverse_cardinality cannot be nil.')
          end

          if @id.nil?
            invalid_properties.push('invalid value for "id", id cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @from_object_type_id.nil?
          return false if @to_object_type_id.nil?
          return false if @cardinality.nil?
          cardinality_validator = EnumAttributeValidator.new('String', ["ONE_TO_ONE", "ONE_TO_MANY"])
          return false unless cardinality_validator.valid?(@cardinality)
          return false if @inverse_cardinality.nil?
          inverse_cardinality_validator = EnumAttributeValidator.new('String', ["ONE_TO_ONE", "ONE_TO_MANY"])
          return false unless inverse_cardinality_validator.valid?(@inverse_cardinality)
          return false if @id.nil?
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] cardinality Object to be assigned
        def cardinality=(cardinality)
          validator = EnumAttributeValidator.new('String', ["ONE_TO_ONE", "ONE_TO_MANY"])
          unless validator.valid?(cardinality)
            fail ArgumentError, "invalid value for \"cardinality\", must be one of #{validator.allowable_values}."
          end
          @cardinality = cardinality
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] inverse_cardinality Object to be assigned
        def inverse_cardinality=(inverse_cardinality)
          validator = EnumAttributeValidator.new('String', ["ONE_TO_ONE", "ONE_TO_MANY"])
          unless validator.valid?(inverse_cardinality)
            fail ArgumentError, "invalid value for \"inverse_cardinality\", must be one of #{validator.allowable_values}."
          end
          @inverse_cardinality = inverse_cardinality
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              from_object_type_id == o.from_object_type_id &&
              to_object_type_id == o.to_object_type_id &&
              name == o.name &&
              cardinality == o.cardinality &&
              inverse_cardinality == o.inverse_cardinality &&
              id == o.id &&
              created_at == o.created_at &&
              updated_at == o.updated_at
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [from_object_type_id, to_object_type_id, name, cardinality, inverse_cardinality, id, created_at, updated_at].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          self.class.openapi_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            Hubspot::Crm::Schemas.const_get(type).build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end
            
            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
