=begin
#Properties

#All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module Hubspot
  module Client
    module Crm
      module Properties
        module Api
          class CoreApi
            attr_accessor :api_client

            def initialize(api_client = ApiClient.default)
              @api_client = api_client
            end
            # Archive a property
            # Move a property identified by {propertyName} to the recycling bin.
            # @param object_type [String] 
            # @param property_name [String] 
            # @param [Hash] opts the optional parameters
            # @return [nil]
            def delete_crm_v3_properties_object_type_property_name(object_type, property_name, opts = {})
              delete_crm_v3_properties_object_type_property_name_with_http_info(object_type, property_name, opts)
              nil
            end

            # Archive a property
            # Move a property identified by {propertyName} to the recycling bin.
            # @param object_type [String] 
            # @param property_name [String] 
            # @param [Hash] opts the optional parameters
            # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
            def delete_crm_v3_properties_object_type_property_name_with_http_info(object_type, property_name, opts = {})
              if @api_client.config.debugging
                @api_client.config.logger.debug 'Calling API: CoreApi.delete_crm_v3_properties_object_type_property_name ...'
              end
              # verify the required parameter 'object_type' is set
              if @api_client.config.client_side_validation && object_type.nil?
                fail ArgumentError, "Missing the required parameter 'object_type' when calling CoreApi.delete_crm_v3_properties_object_type_property_name"
              end
              # verify the required parameter 'property_name' is set
              if @api_client.config.client_side_validation && property_name.nil?
                fail ArgumentError, "Missing the required parameter 'property_name' when calling CoreApi.delete_crm_v3_properties_object_type_property_name"
              end
              # resource path
              local_var_path = '/{objectType}/{propertyName}'.sub('{' + 'objectType' + '}', CGI.escape(object_type.to_s)).sub('{' + 'propertyName' + '}', CGI.escape(property_name.to_s))

              # query parameters
              query_params = opts[:query_params] || {}

              # header parameters
              header_params = opts[:header_params] || {}
              # HTTP header 'Accept' (if needed)
              header_params['Accept'] = @api_client.select_header_accept(['*/*'])

              # form parameters
              form_params = opts[:form_params] || {}

              # http body (model)
              post_body = opts[:body] 

              # return_type
              return_type = opts[:return_type] 

              # auth_names
              auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

              new_options = opts.merge(
                :header_params => header_params,
                :query_params => query_params,
                :form_params => form_params,
                :body => post_body,
                :auth_names => auth_names,
                :return_type => return_type
              )

              data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
              if @api_client.config.debugging
                @api_client.config.logger.debug "API called: CoreApi#delete_crm_v3_properties_object_type_property_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
              end
              return data, status_code, headers
            end

            # Read all properties
            # Read all existing properties for the specified object type and HubSpot account.
            # @param object_type [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
            # @return [CollectionResponseProperty]
            def get_crm_v3_properties_object_type(object_type, opts = {})
              data, _status_code, _headers = get_crm_v3_properties_object_type_with_http_info(object_type, opts)
              data
            end

            # Read all properties
            # Read all existing properties for the specified object type and HubSpot account.
            # @param object_type [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [Boolean] :archived Whether to return only results that have been archived.
            # @return [Array<(CollectionResponseProperty, Integer, Hash)>] CollectionResponseProperty data, response status code and response headers
            def get_crm_v3_properties_object_type_with_http_info(object_type, opts = {})
              if @api_client.config.debugging
                @api_client.config.logger.debug 'Calling API: CoreApi.get_crm_v3_properties_object_type ...'
              end
              # verify the required parameter 'object_type' is set
              if @api_client.config.client_side_validation && object_type.nil?
                fail ArgumentError, "Missing the required parameter 'object_type' when calling CoreApi.get_crm_v3_properties_object_type"
              end
              # resource path
              local_var_path = '/{objectType}'.sub('{' + 'objectType' + '}', CGI.escape(object_type.to_s))

              # query parameters
              query_params = opts[:query_params] || {}
              query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

              # header parameters
              header_params = opts[:header_params] || {}
              # HTTP header 'Accept' (if needed)
              header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

              # form parameters
              form_params = opts[:form_params] || {}

              # http body (model)
              post_body = opts[:body] 

              # return_type
              return_type = opts[:return_type] || 'CollectionResponseProperty' 

              # auth_names
              auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

              new_options = opts.merge(
                :header_params => header_params,
                :query_params => query_params,
                :form_params => form_params,
                :body => post_body,
                :auth_names => auth_names,
                :return_type => return_type
              )

              data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
              if @api_client.config.debugging
                @api_client.config.logger.debug "API called: CoreApi#get_crm_v3_properties_object_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
              end
              return data, status_code, headers
            end

            # Read a property
            # Read a property identified by {propertyName}.
            # @param object_type [String] 
            # @param property_name [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
            # @return [Property]
            def get_crm_v3_properties_object_type_property_name(object_type, property_name, opts = {})
              data, _status_code, _headers = get_crm_v3_properties_object_type_property_name_with_http_info(object_type, property_name, opts)
              data
            end

            # Read a property
            # Read a property identified by {propertyName}.
            # @param object_type [String] 
            # @param property_name [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [Boolean] :archived Whether to return only results that have been archived.
            # @return [Array<(Property, Integer, Hash)>] Property data, response status code and response headers
            def get_crm_v3_properties_object_type_property_name_with_http_info(object_type, property_name, opts = {})
              if @api_client.config.debugging
                @api_client.config.logger.debug 'Calling API: CoreApi.get_crm_v3_properties_object_type_property_name ...'
              end
              # verify the required parameter 'object_type' is set
              if @api_client.config.client_side_validation && object_type.nil?
                fail ArgumentError, "Missing the required parameter 'object_type' when calling CoreApi.get_crm_v3_properties_object_type_property_name"
              end
              # verify the required parameter 'property_name' is set
              if @api_client.config.client_side_validation && property_name.nil?
                fail ArgumentError, "Missing the required parameter 'property_name' when calling CoreApi.get_crm_v3_properties_object_type_property_name"
              end
              # resource path
              local_var_path = '/{objectType}/{propertyName}'.sub('{' + 'objectType' + '}', CGI.escape(object_type.to_s)).sub('{' + 'propertyName' + '}', CGI.escape(property_name.to_s))

              # query parameters
              query_params = opts[:query_params] || {}
              query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

              # header parameters
              header_params = opts[:header_params] || {}
              # HTTP header 'Accept' (if needed)
              header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

              # form parameters
              form_params = opts[:form_params] || {}

              # http body (model)
              post_body = opts[:body] 

              # return_type
              return_type = opts[:return_type] || 'Property' 

              # auth_names
              auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

              new_options = opts.merge(
                :header_params => header_params,
                :query_params => query_params,
                :form_params => form_params,
                :body => post_body,
                :auth_names => auth_names,
                :return_type => return_type
              )

              data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
              if @api_client.config.debugging
                @api_client.config.logger.debug "API called: CoreApi#get_crm_v3_properties_object_type_property_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
              end
              return data, status_code, headers
            end

            # Update a property
            # Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
            # @param object_type [String] 
            # @param property_name [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [PropertyUpdate] :property_update 
            # @return [Property]
            def patch_crm_v3_properties_object_type_property_name(object_type, property_name, opts = {})
              data, _status_code, _headers = patch_crm_v3_properties_object_type_property_name_with_http_info(object_type, property_name, opts)
              data
            end

            # Update a property
            # Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
            # @param object_type [String] 
            # @param property_name [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [PropertyUpdate] :property_update 
            # @return [Array<(Property, Integer, Hash)>] Property data, response status code and response headers
            def patch_crm_v3_properties_object_type_property_name_with_http_info(object_type, property_name, opts = {})
              if @api_client.config.debugging
                @api_client.config.logger.debug 'Calling API: CoreApi.patch_crm_v3_properties_object_type_property_name ...'
              end
              # verify the required parameter 'object_type' is set
              if @api_client.config.client_side_validation && object_type.nil?
                fail ArgumentError, "Missing the required parameter 'object_type' when calling CoreApi.patch_crm_v3_properties_object_type_property_name"
              end
              # verify the required parameter 'property_name' is set
              if @api_client.config.client_side_validation && property_name.nil?
                fail ArgumentError, "Missing the required parameter 'property_name' when calling CoreApi.patch_crm_v3_properties_object_type_property_name"
              end
              # resource path
              local_var_path = '/{objectType}/{propertyName}'.sub('{' + 'objectType' + '}', CGI.escape(object_type.to_s)).sub('{' + 'propertyName' + '}', CGI.escape(property_name.to_s))

              # query parameters
              query_params = opts[:query_params] || {}

              # header parameters
              header_params = opts[:header_params] || {}
              # HTTP header 'Accept' (if needed)
              header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
              # HTTP header 'Content-Type'
              header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

              # form parameters
              form_params = opts[:form_params] || {}

              # http body (model)
              post_body = opts[:body] || @api_client.object_to_http_body(opts[:'property_update']) 

              # return_type
              return_type = opts[:return_type] || 'Property' 

              # auth_names
              auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

              new_options = opts.merge(
                :header_params => header_params,
                :query_params => query_params,
                :form_params => form_params,
                :body => post_body,
                :auth_names => auth_names,
                :return_type => return_type
              )

              data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
              if @api_client.config.debugging
                @api_client.config.logger.debug "API called: CoreApi#patch_crm_v3_properties_object_type_property_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
              end
              return data, status_code, headers
            end

            # Create a property
            # Create and return a copy of a new property for the specified object type.
            # @param object_type [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [PropertyCreate] :property_create 
            # @return [Property]
            def post_crm_v3_properties_object_type(object_type, opts = {})
              data, _status_code, _headers = post_crm_v3_properties_object_type_with_http_info(object_type, opts)
              data
            end

            # Create a property
            # Create and return a copy of a new property for the specified object type.
            # @param object_type [String] 
            # @param [Hash] opts the optional parameters
            # @option opts [PropertyCreate] :property_create 
            # @return [Array<(Property, Integer, Hash)>] Property data, response status code and response headers
            def post_crm_v3_properties_object_type_with_http_info(object_type, opts = {})
              if @api_client.config.debugging
                @api_client.config.logger.debug 'Calling API: CoreApi.post_crm_v3_properties_object_type ...'
              end
              # verify the required parameter 'object_type' is set
              if @api_client.config.client_side_validation && object_type.nil?
                fail ArgumentError, "Missing the required parameter 'object_type' when calling CoreApi.post_crm_v3_properties_object_type"
              end
              # resource path
              local_var_path = '/{objectType}'.sub('{' + 'objectType' + '}', CGI.escape(object_type.to_s))

              # query parameters
              query_params = opts[:query_params] || {}

              # header parameters
              header_params = opts[:header_params] || {}
              # HTTP header 'Accept' (if needed)
              header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
              # HTTP header 'Content-Type'
              header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

              # form parameters
              form_params = opts[:form_params] || {}

              # http body (model)
              post_body = opts[:body] || @api_client.object_to_http_body(opts[:'property_create']) 

              # return_type
              return_type = opts[:return_type] || 'Property' 

              # auth_names
              auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

              new_options = opts.merge(
                :header_params => header_params,
                :query_params => query_params,
                :form_params => form_params,
                :body => post_body,
                :auth_names => auth_names,
                :return_type => return_type
              )

              data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
              if @api_client.config.debugging
                @api_client.config.logger.debug "API called: CoreApi#post_crm_v3_properties_object_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
              end
              return data, status_code, headers
            end
          end
        end
      end
    end
  end
end